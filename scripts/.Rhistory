avg.line.o = 1,  # Average line
bar.f.o = .5, # Bar
inf.f.col = "white",  # Inf fill col
inf.b.col = "black",  # Inf border col
avg.line.col = "black",  # avg line col
bar.f.col = gray(.8),  # bar filling color
point.pch = 21,
point.bg = "white",
point.col = "black",
point.cex = .7,
xlab="",
)
}, height=600)
output$plotmeans <-renderPlot({
if (grepl('Arousal', input$formula_choice) &grepl('TestMoment', input$formula_choice)){
dmean<-summarySE(dataBig2, measurevar="Arousal", groupvars=c('PMSScoreNew', 'Moment'))
p3 <- ggplot(dataBig2, aes(x=Moment, y=Arousal, fill=PMSScoreNew))+
geom_flat_violin (aes(fill=PMSScoreNew), position= position_nudge(x=.1, y=0), adjust=1.5, alpha= .5, colour=NA)+
geom_boxplot(aes(x=Moment, y=Arousal, fill=PMSScoreNew), outlier.shape=NA, alpha=.5, width=.1, colour='black')+
geom_line(data=dmean, aes(x= as.numeric(Moment)+.1, y=Arousal, group=PMSScoreNew, colour=PMSScoreNew), size=1.5)+
geom_point(data = dmean, aes(x = as.numeric(Moment)+.1, y = Arousal, group = PMSScoreNew, fill= PMSScoreNew), shape = 21, size=6)+
scale_x_discrete(labels=c('1'='control', '2'='premenstrual'))+
annotate('text', x=1, y=105, label='*', size=8)+
annotate('text', x=2, y=105, label='*', size=8)+
geom_segment(aes(x = 0.97, y = 103, xend = 1.03, yend = 103), size= 2)+
geom_segment(aes(x = 1.97, y = 103, xend = 2.03, yend = 103), size= 2)+
ggtitle('Arousal ~ PMSScoreNew * TestMoment')
p3
}else if (grepl('Valence', input$formula_choice) & grepl('TestMoment', input$formula_choice)){
dmean<-summarySE(dataBig2, measurevar="Valence", groupvars=c('PMSScoreNew', 'Moment'))
p3 <- ggplot(dataBig2, aes(x=Moment, y=Valence, fill=PMSScoreNew))+
geom_flat_violin (aes(fill=PMSScoreNew), position= position_nudge(x=.1, y=0), adjust=1.5, alpha= .5, colour=NA)+
geom_boxplot(aes(x=Moment, y=Valence, fill=PMSScoreNew), outlier.shape=NA, alpha=.5, width=.1, colour='black')+
geom_line(data=dmean, aes(x= as.numeric(Moment)+.1, y=Valence, group=PMSScoreNew, colour=PMSScoreNew), size=1.5)+
geom_point(data = dmean, aes(x = as.numeric(Moment)+.1, y = Valence, group = PMSScoreNew, fill=PMSScoreNew), shape = 21, size=6)+
scale_x_discrete(labels=c('1'='control', '2'='premenstrual'))+
ggtitle('Valence~PMSScoreNew * TestMoment')
p3
}
else if (grepl('Arousal', input$formula_choice) & !grepl('TestMoment', input$formula_choice)){
dmean<-summarySE(dataBig2, measurevar="Arousal", groupvars=c('PMSScoreNew'))
p1 <- ggplot(dataBig2, aes(x = PMSScoreNew, y = Arousal)) +
geom_flat_violin(aes(fill=PMSScoreNew),position = position_nudge(x =.2, y = -1), adjust = 1.5, alpha = .5, colour = NA)+
geom_point(aes(colour=PMSScoreNew),position=position_jitter(width=.15), size=.25)+
geom_boxplot(aes(x = PMSScoreNew, y = Arousal, fill = PMSScoreNew),outlier.shape= NA, width = .1, colour = "black")+
geom_point(data = dmean, aes(x = as.numeric(PMSScoreNew)+.2, y = Arousal, fill=PMSScoreNew), shape = 21, size=6)+
geom_line(data=dmean, aes(x=as.numeric(PMSScoreNew)+.2, y=Arousal), size=1, colour='black')+
geom_segment(aes(x = 1.2, y = 103, xend = 2.2, yend = 103), size= 1.7)+
# annotate('text', x=1.6, y=105, label=sprintf("\n%s\n", p_pms()), size=10)+
annotate('text', x=1.6, y=105, label='*', size=10)+
scale_x_discrete(labels=c('1'='control', '2'='premenstrual'))+
ggtitle('Arousal~PMSScoreNew')
# coord_flip()
p1 <- ggplot(dataBig2, aes(x = PMSScoreNew, y = Arousal)) +
geom_flat_violin(aes(fill=PMSScoreNew),position = position_nudge(x =.2, y = -1), adjust = 1.5, alpha = .5, colour = NA)+
geom_point(aes(colour=PMSScoreNew),position=position_jitter(width=.15), size=.25)+
geom_boxplot(aes(x = PMSScoreNew, y = Arousal, fill = PMSScoreNew),outlier.shape= NA, width = .1, colour = "black")+
geom_point(data = dmean, aes(x = as.numeric(PMSScoreNew), y = Arousal, fill=PMSScoreNew), shape = 21, size=6)+
# geom_line(data=dmean, aes(x=as.numeric(PMSScoreNew)+.2, y=Arousal), size=1, colour='black')+
geom_segment(aes(x = 1, y = 103, xend = 2, yend = 103), size= 1.7)+
# annotate('text', x=1.6, y=105, label=sprintf("\n%s\n", p_pms()), size=10)+
annotate('text', x=1.6, y=105, label='*', size=10)+
scale_x_discrete(labels=c('1'='control', '2'='premenstrual'))+
ggtitle('Arousal~PMSScoreNew')
# coord_flip()
p1
}else {
dmean<-summarySE(dataBig2, measurevar="Valence", groupvars=c('PMSScoreNew'))
p1 <- ggplot(dataBig2, aes(x = PMSScoreNew, y = Valence)) +
geom_flat_violin(aes(fill=PMSScoreNew),position = position_nudge(x =.2, y = -1), adjust= 1.5, alpha = .5, colour = NA)+
geom_point(aes(colour=PMSScoreNew),position=position_jitter(width=.15), size=.25)+
geom_boxplot(aes(x = PMSScoreNew, y = Valence, fill = PMSScoreNew),outlier.shape= NA, width = .1, colour = "black")+
geom_point(data = dmean, aes(x = as.numeric(PMSScoreNew)+.2, y = Valence, fill=PMSScoreNew), shape = 21, size=6)+
geom_line(data=dmean, aes(x=as.numeric(PMSScoreNew)+.2, y=Valence), size=1, colour='black')+
# annotate('text', x=1.6, y=70, label=sprintf("\n%s\n", p_pms()), size=8)+
ggtitle('Valence~PMSScoreNew')
# coord_flip()
p1
#
# p<- ggplot(dataBig2, aes(x=PMSScoreNew, y=Valence, fill=PMSScoreNew))+
#     geom_split_violin(adjust=1.5,alpha=.5, colour=NA )+
#   geom_point(aes(colour=PMSScoreNew),position=position_jitter(width=.15), size=.25)+
#   geom_boxplot(aes(x = PMSScoreNew, y = Valence, fill = PMSScoreNew),outlier.shape= NA, alpha = .5, width = .1, colour = "black")+
#   geom_point(data = dmean, aes(x = as.numeric(PMSScoreNew), y = Valence, group = PMSScoreNew, fill = PMSScoreNew), position=position_dodge(0.2), shape = 21, size=4)+
#   ggtitle('Valence ~ PMS')
# p
#
#
#
}
}, height=600)
output$splitviolin <-renderPlot({
if (grepl('Arousal', input$formula_choice)){
dmean<-summarySE(dataBig2, measurevar="Arousal", groupvars=c('PMSScoreNew', 'Moment'))
p<- ggplot(dataBig2, aes(x=Moment, y=Arousal, fill=PMSScoreNew))+
geom_split_violin(adjust =1.5, alpha=.5, colour= NA)+
geom_boxplot(aes(x = Moment, y = Arousal, fill = PMSScoreNew), position= position_dodge(0.2),outlier.shape= NA, alpha = .5, width = .1, colour = "black")+
geom_point(data = dmean, aes(x = as.numeric(Moment), y = Arousal, group = PMSScoreNew, fill = PMSScoreNew), position= position_dodge(0.2), shape = 21, size=4)+
scale_x_discrete(labels=c('1'='control', '2'='premenstrual'))+
annotate('text', x=1, y=105, label='*', size=8)+
annotate('text', x=2, y=105, label='*', size=8)+
geom_segment(aes(x = 0.955, y = 103, xend = 1.055, yend = 103), size= 2)+
geom_segment(aes(x = 1.955, y = 103, xend = 2.055, yend = 103), size= 2)+
ggtitle('Arousal ~ PMS * TestMoment')
p
} else if (grepl('Valence', input$formula_choice)){
dmean<-summarySE(dataBig2, measurevar="Valence", groupvars=c('PMSScoreNew', 'Moment'))
p<- ggplot(dataBig2, aes(x=Moment, y=Valence, fill=PMSScoreNew))+
geom_split_violin(adjust=1.5,alpha=.5, colour=NA)+
geom_boxplot(aes(x = Moment, y = Valence, fill = PMSScoreNew), position= position_dodge(0.2) ,outlier.shape= NA, alpha = .5, width = .1, colour = "black")+
geom_point(data = dmean, aes(x = as.numeric(Moment), y = Valence, group = PMSScoreNew, fill = PMSScoreNew), position=position_dodge(0.2), shape = 21, size=4)+
scale_x_discrete(labels=c('1'='control', '2'='premenstrual'))+
ggtitle('Valence ~ PMS * TestMoment')
p
}
}, height=600)
output$int_means <- renderPlot({
if ((grepl('Valence', input$formula_choice))){
dmean<-summarySE(dataBig2, measurevar="Valence", groupvars=c('TestMoment', 'PMSScoreNew'))# this function gives sd, se mean and default 95% C.I.
p<-ggplot(dmean, aes(x=TestMoment, y=Valence, colour=PMSScoreNew, group=PMSScoreNew)) +
geom_errorbar(aes(ymin=Valence-standard_error(Valence), ymax=Valence+standard_error(Valence), width=.1))+
geom_line() +
geom_point(size=3)
p} else {
dmean<-summarySE(dataBig2, measurevar="Arousal", groupvars=c('TestMoment', 'PMSScoreNew'))# this function gives sd, se mean and default 95% C.I.
p<-ggplot(dmean, aes(x=TestMoment, y=Arousal, colour=PMSScoreNew, group=PMSScoreNew)) +
geom_errorbar(aes(ymin=Arousal-standard_error(Arousal), ymax=Arousal+standard_error(Arousal), width=.1))+
geom_line() +
geom_point(size=3)
p}
})
models <- reactive({ # we need to create this within a reactive context to be able to access the formula_choice
m <- c()
# Formula <- 'DASS_Stress ~ PMSScoreNew * TestMoment + (1|Subject)'
Formula <- paste0(input$formula_choice, '+ (1|Subject)')
tryCatch(
{ d0.1 <- lmer(Formula,data=dataBig2); # if this formula works
m <- c(m, d1=d0.1)}, #we add this
error=function(e){})
tryCatch(
{ d0.2 <- glmer(Formula,data=dataBig2, family = gaussian(link = "inverse"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d1=d0.2)},
error=function(e){})
tryCatch(
{ d0.3 <- glmer(Formula,data=dataBig2, family = gaussian(link = "log"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d3=d0.3)},
error=function(e){})
tryCatch(
{ d0.4 <- glmer(Formula,data=dataBig2, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d4=d0.4)},
error=function(e){})
tryCatch(
{ d0.5 <- glmer(Formula,data=dataBig2, family = Gamma(link = "inverse"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d5=d0.5) },
error=function(e){})
tryCatch(
{ d0.6 <- glmer(Formula,data=dataBig2, family = Gamma(link = "log"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d6=d0.6) },
error=function(e){})
tryCatch(
{ d0.7 <- glmer(Formula,data=dataBig2, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
models <- c(models, d7=d0.7) },
error=function(e){})
tryCatch(
{ d0.8 <- glmer(Formula,data=dataBig2, family = inverse.gaussian(link = "inverse"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d8=d0.8) },
error=function(e){})
tryCatch(
{ d0.9 <- glmer(Formula,data=dataBig2, family = inverse.gaussian(link = "log"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d9=d0.9) },
error=function(e){})
m
})
output$table <-renderTable({
modelNames<-c()
tabel<-c()
for (i in 1:length(models())){
modelNames<-c(modelNames, names(models()[i]))
AIC<-AIC(models()[[i]])
tabel <- c (tabel, round(AIC))}
chosenModel = modelNames[which(tabel == min(tabel))]
tabel <- data.frame(Models=c('chosen  Model:', modelNames), AIC= c(chosenModel, tabel))
tabel
})
p<-reactive({
tabel<-c()
for (i in 1:length(models())){
AIC<- AIC(models()[[i]])
tabel <- c(tabel,round(AIC))}
chosenModel<-models()[which(tabel == min(tabel))]
Anova_1 <- Anova(chosenModel[[1]])
cat(sprintf("\nAnova\n"))
Anova_1
#            tabel<-c()
# for (i in 1:length(m)){
#     AIC<- AIC(m[[i]])
#     tabel <- c(tabel,round(AIC))}
# chosenModel<-m[which(tabel == min(tabel))]
#    Anova_1 <- Anova(chosenModel[[1]])
#    cat(sprintf("\nAnova\n"))
#    an<-Anova_1
})
output$Anova <- renderPrint({
p()
})
em <- reactive({
tabel<-c()
for (i in 1:length(models())){
AIC<- AIC(models()[[i]])
tabel <- c(tabel,round(AIC))}
chosenModel<-models()[which(tabel == min(tabel))]
cat(sprintf("\nemmeans of formula: %s\n", input$formula_choice))
if ((grepl("TestMoment", input$formula_choice)==FALSE)){
emmeans(chosenModel[[1]], pairwise ~ PMSScoreNew, adjust ="fdr", type="response")
}else{
emmeans(chosenModel[[1]], pairwise ~ PMSScoreNew*TestMoment, adjust ="fdr", type="response")
}
# tabel <- c()
#     for (i in 1:length(m)){
#   AIC<- AIC(m[[i]])
#   tabel <- c(tabel,round(AIC))}
# chosenModel<-m[which(tabel == min(tabel))]
# cat(sprintf("\nemmeans of formula: %s\n", Formula))
# if ((grepl("TestMoment", Formula)==FALSE)){
#  em<- emmeans(chosenModel[[1]], pairwise ~ PMSScoreNew, adjust ="fdr", type="response")
# }else{
#   em<-  emmeans(chosenModel[[1]], pairwise ~ PMSScoreNew*TestMoment, adjust ="fdr", type="response")
# }
#
})
output$emmeans <- renderPrint({
em()
})
}
shinyApp(ui=ui, server=server, options= list(height=800))
knitr::opts_chunk$set(dev = "png",
fig.path='Z:\\shares\\ghepmk_data\\2020_Kappen_PMS\\figures\\',
dpi = 300,
cache = FALSE)
library(Rmisc)
library(raincloudplots)
install.packages("raincloudplots")
library(lme4)
library(lmerTest)
library(effects)
library(dplyr)
library(car)
library(emmeans)
library(fitdistrplus)
library(gplots)
library(ggplot2)
library(ggstatsplot)
library(ggsignif)
library(ggformula)
library(ggdist)
library(ggpubr)
library(ggeffects)
library(gridExtra)
library(tidyverse)
library(pander)
library(stringr)
library(cowplot)
library(lavaan)
library(readr)
library(jpeg)
library(shiny)
library(reshape2)
library (yarrr)
library(knitr)
library(remotes)
install.packages("raincloudplots")
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
options(contrasts=c("contr.sum", "contr.poly")) # Set contrast settings to effect coding
# Libraries
library(arrow)
# Set and Get directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
##### Loading data #####
imageData <-as.data.frame(read_parquet("../loc_data/df_session_uuid.parquet"))
piscesData <- imageData[imageData$DB == 'PiSCES',]
radboudData <- imageData[imageData$DB == 'Radboud',]
marloesData <- imageData[imageData$DB == 'Marloes',]
# Cronbach's Alpha
library(ltm)
# Arousal
piscesDataClean = piscesData[c("ID", "pic_name","arousal")]
piscesDataClean$pic_name = as.factor(piscesDataClean$pic_name)
piscesDataClean = reshape(piscesDataClean, idvar = "ID", timevar = "pic_name", direction = "wide") # Drops two answers, two people answered 1 trial twice?
cronbach.alpha(piscesDataClean, CI=TRUE, na.rm = TRUE)
# Valence
piscesDataClean = piscesData[c("ID", "pic_name","valence")]
piscesDataClean$pic_name = as.factor(piscesDataClean$pic_name)
piscesDataClean = reshape(piscesDataClean, idvar = "ID", timevar = "pic_name", direction = "wide") # Drops two answers, two people answered 1 trial twice?
cronbach.alpha(piscesDataClean, CI=TRUE, na.rm = TRUE)
?HolzingerSwineford1939
??HolzingerSwineford1939
data = HolzingerSwineford1939
data(HolzingerSwineford1939)
data(HolzingerSwineford1939)
library(lavaan)
data(HolzingerSwineford1939)
force(HolzingerSwineford1939)
data = data(HolzingerSwineford1939)
View(piscesData)
View(piscesDataClean)
names(piscesData)
names(piscesDataClean)
names(piscesDataClean)[1:16]
names(piscesDataClean)[2:16]
HS.model <- 'pisces =~ valence.Picture 105 + valence.Picture 82 + valence.Picture 118 + valence.Picture  65 + valence.Picture 88'
fit <- cfa(HS.model, data=piscesDataClean)
HS.model <- 'pisces =~ "valence.Picture 105" + valence.Picture 82 + valence.Picture 118 + valence.Picture  65 + valence.Picture 88'
fit <- cfa(HS.model, data=piscesDataClean)
HS.model <- 'pisces =~ "valence.Picture 105" + "valence.Picture 82" + "valence.Picture 118" + "valence.Picture  65" + "valence.Picture 88"'
fit <- cfa(HS.model, data=piscesDataClean)
# fa.parallel(piscesData$arousal[,-1], fa="PC", ntrials=100,
#             show.legend=FALSE, main="Scree plot with parallel analysis")
names(piscesDataClean)[2:16] = c("Picture_105", "Picture_82",  "Picture_118", "Picture_65", "valence.Picture 88", "valence.Picture 87", "valence.Picture 59", "valence.Picture 93", "valence.Picture 56", "valence.Picture 81",
"valence.Picture 110", "valence.Picture 96",  "valence.Picture 132", "valence.Picture 80",  "valence.Picture 98" )
# fa.parallel(piscesData$arousal[,-1], fa="PC", ntrials=100,
#             show.legend=FALSE, main="Scree plot with parallel analysis")
names(piscesDataClean)[2:16] = c("Picture_105", "Picture_82",  "Picture_118", "Picture_65", "Picture_88", "Picture_87", "Picture_59", "Picture_93", "Picture_56", "Picture_81",
"Picture_110", "Picture_96",  "Picture_132", "Picture_80",  "Picture_98" )
HS.model <- 'pisces =~ Picture_105 + Picture_82 + Picture_118 + Picture_ 65 + Picture_88'
fit <- cfa(HS.model, data=piscesDataClean)
summary(fit, fit.measures=TRUE)
HS.model <- 'pisces =~ Picture_105 + Picture_82 + Picture_118 + Picture_ 65 + Picture_88 + Picture_87 + Picture_59 + Picture_93 + Picture_56 + Picture_81 + Picture_110 + Picture_96 + Picture_132 + Picture_80 + Picture_98'
fit <- cfa(HS.model, data=piscesDataClean)
summary(fit, fit.measures=TRUE)
fit <- cfa(HS.model, data=piscesDataClean, std.lv=TRUE)
summary(fit, fit.measures=TRUE)
summary(fit, fit.measures=TRUE, standardized=TRUE)
lavaanPlot(model = fit, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, sig = .05)
# Visualize CFA
library(lavaanPlot)
install.packages("lavaanPlot")
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
options(contrasts=c("contr.sum", "contr.poly")) # Set contrast settings to effect coding
# Libraries
library(arrow)
# Set and Get directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
##### Loading data #####
imageData <-as.data.frame(read_parquet("../loc_data/df_session_uuid.parquet"))
piscesData <- imageData[imageData$DB == 'PiSCES',]
radboudData <- imageData[imageData$DB == 'Radboud',]
marloesData <- imageData[imageData$DB == 'Marloes',]
# Cronbach's Alpha
library(ltm)
# Arousal
piscesDataClean = piscesData[c("ID", "pic_name","arousal")]
piscesDataClean$pic_name = as.factor(piscesDataClean$pic_name)
piscesDataClean = reshape(piscesDataClean, idvar = "ID", timevar = "pic_name", direction = "wide") # Drops two answers, two people answered 1 trial twice?
cronbach.alpha(piscesDataClean, CI=TRUE, na.rm = TRUE)
# Valence
piscesDataClean = piscesData[c("ID", "pic_name","valence")]
piscesDataClean$pic_name = as.factor(piscesDataClean$pic_name)
piscesDataClean = reshape(piscesDataClean, idvar = "ID", timevar = "pic_name", direction = "wide") # Drops two answers, two people answered 1 trial twice?
cronbach.alpha(piscesDataClean, CI=TRUE, na.rm = TRUE)
# PCA
library(psych)
library(lavaan)
# fa.parallel(piscesData$arousal[,-1], fa="PC", ntrials=100,
#             show.legend=FALSE, main="Scree plot with parallel analysis")
names(piscesDataClean)[2:16] = c("Picture_105", "Picture_82",  "Picture_118", "Picture_65", "Picture_88", "Picture_87", "Picture_59", "Picture_93", "Picture_56", "Picture_81",
"Picture_110", "Picture_96",  "Picture_132", "Picture_80",  "Picture_98" )
# piscesDataClean = piscesData[c("ID", "pic_name","valence","arousal")]
# names(piscesDataClean)[2:16]
HS.model <- 'pisces  =~ valence + arousal'
HS.model <- 'pisces =~ Picture_105 + Picture_82 + Picture_118 + Picture_ 65 + Picture_88 + Picture_87 + Picture_59 + Picture_93 + Picture_56 + Picture_81 + Picture_110 + Picture_96 + Picture_132 + Picture_80 + Picture_98'
fit <- cfa(HS.model, data=piscesDataClean, std.lv=TRUE)
summary(fit, fit.measures=TRUE, standardized=TRUE)
# Visualize CFA
library(lavaanPlot)
lavaanPlot(model = fit, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, sig = .05)
HS.model <- 'pisces =~ Picture_105 + Picture_82 + Picture_118 + Picture_65 + Picture_88 + Picture_87 + Picture_59 + Picture_93 + Picture_56 + Picture_81 + Picture_110 + Picture_96 + Picture_132 + Picture_80 + Picture_98'
fit <- cfa(HS.model, data=piscesDataClean, std.lv=TRUE)
summary(fit, fit.measures=TRUE, standardized=TRUE)
# Visualize CFA
library(lavaanPlot)
labels <- list(Picture_105 = "P_105", Picture_82 = "P_82", Picture_118 = "P_118", Picture_65 = "P_65", Picture_88 = "P_88", Picture_87 = "P_87", Picture_59 = "P_59", Picture_93 = "P_93", Picture_56 = "P_56", Picture_81 = "P_81", Picture_110 = "P_110", Picture_96 = "P_96", Picture_132 = "P32", Picture_80 = "P_80", Picture_98 = "P_98")
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, sig = .05)
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, stand = TRUE)
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, covs = TRUE)
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, covs = TRUE, stars = "covs")
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, stand = TRUE, stars = "stand")
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, covs = TRUE, stars = "latent")
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, stand = TRUE, stars = "latent")
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, sig = .05)
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, stand = TRUE, stars = "latent")
# Valence
piscesDataClean = piscesData[c("ID", "pic_name","valence")]
piscesDataClean$pic_name = as.factor(piscesDataClean$pic_name)
piscesDataClean = reshape(piscesDataClean, idvar = "ID", timevar = "pic_name", direction = "wide") # Drops two answers, two people answered 1 trial twice?
cronbach.alpha(piscesDataClean, CI=TRUE, na.rm = TRUE)
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
options(contrasts=c("contr.sum", "contr.poly")) # Set contrast settings to effect coding
# Libraries
library(arrow)
library(lavaan)
library(lavaanPlot)
# Set and Get directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
##### Loading data #####
imageData <-as.data.frame(read_parquet("../loc_data/df_session_uuid.parquet"))
piscesData <- imageData[imageData$DB == 'PiSCES',]
radboudData <- imageData[imageData$DB == 'Radboud',]
marloesData <- imageData[imageData$DB == 'Marloes',]
library(ltm)
##### Valence #####
piscesDataClean = piscesData[c("ID", "pic_name","valence")]
piscesDataClean$pic_name = as.factor(piscesDataClean$pic_name)
piscesDataClean = reshape(piscesDataClean, idvar = "ID", timevar = "pic_name", direction = "wide") # Drops two answers, two people answered 1 trial twice?
# Cronbach's Alpha
cronbach.alpha(piscesDataClean, CI=TRUE, na.rm = TRUE)
# CFA
names(piscesDataClean)[2:16] = c("Picture_105", "Picture_82",  "Picture_118", "Picture_65", "Picture_88", "Picture_87", "Picture_59", "Picture_93", "Picture_56", "Picture_81",
"Picture_110", "Picture_96",  "Picture_132", "Picture_80",  "Picture_98" )
HS.model <- 'pisces =~ Picture_105 + Picture_82 + Picture_118 + Picture_65 + Picture_88 + Picture_87 + Picture_59 + Picture_93 + Picture_56 + Picture_81 + Picture_110 + Picture_96 + Picture_132 + Picture_80 + Picture_98'
fit <- cfa(HS.model, data=piscesDataClean, std.lv=TRUE)
summary(fit, fit.measures=TRUE, standardized=TRUE)
# Visualize CFA
labels <- list(Picture_105 = "P_105", Picture_82 = "P_82", Picture_118 = "P_118", Picture_65 = "P_65", Picture_88 = "P_88", Picture_87 = "P_87", Picture_59 = "P_59", Picture_93 = "P_93", Picture_56 = "P_56", Picture_81 = "P_81", Picture_110 = "P_110", Picture_96 = "P_96", Picture_132 = "P32", Picture_80 = "P_80", Picture_98 = "P_98")
# Source: https://cran.r-project.org/web/packages/lavaanPlot/vignettes/Intro_to_lavaanPlot.html
# Basic
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, sig = .05)
# Standardized and with significance levels
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, stand = TRUE, stars = "latent")
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, stand = TRUE, stars = "regress")
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, stand = TRUE, stars = "covs")
##### Arousal #####
piscesDataClean = piscesData[c("ID", "pic_name","arousal")]
piscesDataClean$pic_name = as.factor(piscesDataClean$pic_name)
piscesDataClean = reshape(piscesDataClean, idvar = "ID", timevar = "pic_name", direction = "wide") # Drops two answers, two people answered 1 trial twice?
cronbach.alpha(piscesDataClean, CI=TRUE, na.rm = TRUE)
names(piscesDataClean)
HS.model <- 'pisces =~ Picture_105 + Picture_82 + Picture_118 + Picture_65 + Picture_88 + Picture_87 + Picture_59 + Picture_93 + Picture_56 + Picture_81 + Picture_110 + Picture_96 + Picture_132 + Picture_80 + Picture_98'
names(piscesDataClean)
# CFA
names(piscesDataClean)[2:16] = c("Picture_105", "Picture_82",  "Picture_118", "Picture_65", "Picture_88", "Picture_87", "Picture_59", "Picture_93", "Picture_56", "Picture_81",
"Picture_110", "Picture_96",  "Picture_132", "Picture_80",  "Picture_98" )
names(piscesDataClean)
HS.model <- 'pisces =~ Picture_105 + Picture_82 + Picture_118 + Picture_65 + Picture_88 + Picture_87 + Picture_59 + Picture_93 + Picture_56 + Picture_81 + Picture_110 + Picture_96 + Picture_132 + Picture_80 + Picture_98'
fit <- cfa(HS.model, data=piscesDataClean, std.lv=TRUE)
summary(fit, fit.measures=TRUE, standardized=TRUE)
# Visualize CFA
labels <- list(Picture_105 = "P_105", Picture_82 = "P_82", Picture_118 = "P_118", Picture_65 = "P_65", Picture_88 = "P_88", Picture_87 = "P_87", Picture_59 = "P_59", Picture_93 = "P_93", Picture_56 = "P_56", Picture_81 = "P_81", Picture_110 = "P_110", Picture_96 = "P_96", Picture_132 = "P32", Picture_80 = "P_80", Picture_98 = "P_98")
# Source: https://cran.r-project.org/web/packages/lavaanPlot/vignettes/Intro_to_lavaanPlot.html
# Basic
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, sig = .05)
# Standardized and with significance levels
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, stand = TRUE, stars = "latent")
##### Valence #####
piscesDataClean = piscesData[c("ID", "pic_name","valence")]
piscesDataClean$pic_name = as.factor(piscesDataClean$pic_name)
piscesDataClean = reshape(piscesDataClean, idvar = "ID", timevar = "pic_name", direction = "wide") # Drops two answers, two people answered 1 trial twice?
# Cronbach's Alpha
cronbach.alpha(piscesDataClean, CI=TRUE, na.rm = TRUE)
# CFA
names(piscesDataClean)[2:16] = c("Picture_105", "Picture_82",  "Picture_118", "Picture_65", "Picture_88", "Picture_87", "Picture_59", "Picture_93", "Picture_56", "Picture_81",
"Picture_110", "Picture_96",  "Picture_132", "Picture_80",  "Picture_98" )
HS.model <- 'pisces =~ Picture_105 + Picture_82 + Picture_118 + Picture_65 + Picture_88 + Picture_87 + Picture_59 + Picture_93 + Picture_56 + Picture_81 + Picture_110 + Picture_96 + Picture_132 + Picture_80 + Picture_98'
fit <- cfa(HS.model, data=piscesDataClean, std.lv=TRUE)
summary(fit, fit.measures=TRUE, standardized=TRUE)
# Visualize CFA
labels <- list(Picture_105 = "P_105", Picture_82 = "P_82", Picture_118 = "P_118", Picture_65 = "P_65", Picture_88 = "P_88", Picture_87 = "P_87", Picture_59 = "P_59", Picture_93 = "P_93", Picture_56 = "P_56", Picture_81 = "P_81", Picture_110 = "P_110", Picture_96 = "P_96", Picture_132 = "P32", Picture_80 = "P_80", Picture_98 = "P_98")
# Source: https://cran.r-project.org/web/packages/lavaanPlot/vignettes/Intro_to_lavaanPlot.html
# Basic
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, sig = .05)
# Standardized and with significance levels
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, stand = TRUE, stars = "latent")
##### Arousal #####
piscesDataClean = piscesData[c("ID", "pic_name","arousal")]
piscesDataClean$pic_name = as.factor(piscesDataClean$pic_name)
piscesDataClean = reshape(piscesDataClean, idvar = "ID", timevar = "pic_name", direction = "wide") # Drops two answers, two people answered 1 trial twice?
# Cronbach's Alpha
cronbach.alpha(piscesDataClean, CI=TRUE, na.rm = TRUE)
# CFA
names(piscesDataClean)[2:16] = c("Picture_105", "Picture_82",  "Picture_118", "Picture_65", "Picture_88", "Picture_87", "Picture_59", "Picture_93", "Picture_56", "Picture_81",
"Picture_110", "Picture_96",  "Picture_132", "Picture_80",  "Picture_98" )
HS.model <- 'pisces =~ Picture_105 + Picture_82 + Picture_118 + Picture_65 + Picture_88 + Picture_87 + Picture_59 + Picture_93 + Picture_56 + Picture_81 + Picture_110 + Picture_96 + Picture_132 + Picture_80 + Picture_98'
fit <- cfa(HS.model, data=piscesDataClean, std.lv=TRUE)
summary(fit, fit.measures=TRUE, standardized=TRUE)
# Visualize CFA
labels <- list(Picture_105 = "P_105", Picture_82 = "P_82", Picture_118 = "P_118", Picture_65 = "P_65", Picture_88 = "P_88", Picture_87 = "P_87", Picture_59 = "P_59", Picture_93 = "P_93", Picture_56 = "P_56", Picture_81 = "P_81", Picture_110 = "P_110", Picture_96 = "P_96", Picture_132 = "P32", Picture_80 = "P_80", Picture_98 = "P_98")
# Source: https://cran.r-project.org/web/packages/lavaanPlot/vignettes/Intro_to_lavaanPlot.html
# Basic
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, sig = .05)
# Standardized and with significance levels
lavaanPlot(model = fit, labels = labels, node_options = list(shape = "box", fontname = "Helvetica"), edge_options = list(color = "grey"), coefs = TRUE, stand = TRUE, stars = "latent")
##### Valence #####
piscesDataClean = piscesData[c("ID", "pic_name","valence")]
View(piscesDataClean)
min(piscesDataClean$valence)
min(piscesDataClean$valence, na.rm=TRUE)
max(piscesDataClean$valence, na.rm=TRUE)
densityPlot(piscesDataClean$valence, na.rm=TRUE)
library(ggplot2)
densityPlot(piscesDataClean$valence, na.rm=TRUE)
library(car)
densityPlot(piscesDataClean$valence, na.rm=TRUE)
mean(piscesDataClean$valence, na.rm=TRUE)
sd(piscesDataClean$valence, na.rm=TRUE)
